export const getShouldRefreshCurrentSession = (state) => {
  const res = getInsideReducerState(state, ['shouldRefreshCurrentSession']);
  return res;
};



export const SET_SHOULD_CURRENT_SESSION = `module/${ROOT}/SET_SHOULD_CURRENT_SESSION`;

  shouldRefreshCurrentSession: false,

 case SET_SHOULD_CURRENT_SESSION:
      return state.set('shouldRefreshCurrentSession', action.payload); 
 
  SET_SHOULD_CURRENT_SESSION,
export const setRefressCurrentSession = (data) => ({
  type: SET_SHOULD_CURRENT_SESSION,
  payload: data,
});

current sesion
  getCurrentChatDetails,
  getShouldRefreshCurrentSession,

   const refreshCurrentSession = useSelector(
      (state) => getShouldRefreshCurrentSession(state)
    );

useeffect
  }, [currentSessionDetails, refreshCurrentSession]);
   

SessionNav  component
  getSelectedChatDetails,
  getShouldRefreshCurrentSession,

  setRefressCurrentSession,
  const selectedChat = useSelector((state) => getSelectedChatDetails(state));
  const refreshCurrentSession = useSelector((state) => getShouldRefreshCurrentSession(state));


 useEffect(() => {
    if (userId) {
      getPreviousSessions(); 
      dispatch(setRefressPreviousSession(false));
    }
  }, [getPreviousSessions, shouldPreviousSessionRefresh]);
 
  useEffect(() => {
  const fetchAndSetSession = async () => {
    if (!previousSessions || !selectedChat?.chat_id || !refreshCurrentSession) return;

    const matchedSession = previousSessions.find(session =>
      session.chats?.some(chat => chat.chat_id === selectedChat.chat_id)
    );

    console.log('matchedSession', matchedSession);
    console.log('refreshCurrentSession', refreshCurrentSession);

    if (matchedSession) {
      dispatch(setCurrentSessionDetails(matchedSession));
      dispatch(setCurrentChat(matchedSession.chats));
     
    }
  };
  
  fetchAndSetSession();
  dispatch(setRefressCurrentSession(false));

}, [refreshCurrentSession]);
  useEffect(() => {
    fetchProcessingFilesAndChats();
  }, [shouldProcessingSessionRefresh]);

Knowlegde componnet
  setRefressCurrentSession,

  getShouldRefreshCurrentSession,

          dispatch(setRefressCurrentSession(true));
            console.log(' knowledge 452 refreshCurrentSession', refreshCurrentSession);

manageCOntext component 

  setRefressCurrentSession,
  getShouldRefreshCurrentSession, 
 const refreshCurrentSession = useSelector((state) => getShouldRefreshCurrentSession(state));

Right now the problem is when user open the application getprevioussession methode call through which all the previous sessions comes when user click on previous sesion button navigateToPreviousSession called 
 const navigateToPreviousSession = async (session) => {
    dispatch(setRefressProcessingSession(true));
    dispatch(setCurrentProcessingButton(false));
    dispatch(setToggleBanner(false));
    dispatch(setToggleCurrentSession(true));
    setIsSessionsId(session.session_id);
    dispatch(setToggleProcessingStatus(false));
    dispatch(setCurrentSessionDetails(session));
    dispatch(setCurrentChat(session.chats));
    dispatch(toggleNewSession(false));
    dispatch(toggleChatComponent(true));
    dispatch(toggleEditContextButton(false));
  };
and in current session we are update this information dispatch(setCurrentSessionDetails(session));
    dispatch(setCurrentChat(session.chats));
but here is the catch for example if user click on previous session then all information set to the current sesion inside that session user add new file then i re fresh it and againg call get previous session api updated information come but user still on current session he doesn't click on handleprevioussession session 
so current sesion still have old data once again if user click on previous session then in current session all information is updated to solve this if user doesn;t cclick on previous session still i want to update information inside current session so i did these changes but still not able to get thodse files 
