 try {
        dispatch(setRefressPreviousSession(true));
        dispatch(toggleNewSession(false));
        dispatch(setChatMessages([]));
        dispatch(setAllBotSourcesArray([]));
        dispatch(setCurrentSessionDetails({}));
        dispatch(setCurrentChat([]));
        dispatch(toggleEditContextButton(true));
        dispatch(setToggleCurrentSession(false));
        dispatch(setUserSelectedDocumentsForChat(selectedDocuments));
        dispatch(toggleChatComponent(true));
        dispatch(setToggleBanner(true));
        dispatch(setCurrentProcessingButton(true));

        const res = await createChatSession({
          selectedDocuments,
          userId,
          useCase,
          seletedCompanyKnowldge,
          seletedIndustryKnowldge,
          seletedPersonalKnowldge,
          industryType,
        });

        if (res) {
          const result = await res.json();
          const sessionId = result.session_id;

          // âœ… Start polling
          startPollingSessionStatus(sessionId, userId);
        }
      } catch (error) {
        console.error('Failed to create session:', error);
        toast.error('Failed to create session. Try again.');
      }

 const getUserSessionChats = async ({
    userId: uid,
    sessionId: sessId,
  }) => {
    const localUseCase = 'Earnings Call Transcript';
    const data = {
      user_id: uid,
      project_type: 'LUMOS',
      user_agent: 'Windows 10',
      session_id: sessId,
      use_case: localUseCase,
      no_of_chats: 10,
    };

    try {
      const res = await fetch(`${CONFIG.API_BASE_URL}/chats/get_user_session_chats`, {
        method: 'POST',
        body: JSON.stringify(data),
        headers: { 'Content-Type': 'application/json' },
      });

      if (res.ok) {
        return res.json();
      }
    } catch (error) {
      dispatch(setCurrentProcessingButton(false));
      dispatch(setToggleBanner(false));
      dispatch(setRefressPreviousSession(true));
      dispatch(toggleChatComponent(false));
      console.error('Error fetching session chats:', error);
    }

    return null;
  };

  const startPollingSessionStatus = (pollingSessionId, pollingUserId) => {
    const intervalId = setInterval(async () => {
      try {
        const data = await getUserSessionChats({ pollingSessionId, pollingUserId });

        if (!data || data.length === 0) {
          clearInterval(intervalId);
          dispatch(setCurrentProcessingButton(false));
          dispatch(setToggleBanner(false));
          dispatch(setRefressPreviousSession(true));
          dispatch(toggleChatComponent(false));
          toast.error('Session creation failed. Please try again.');
          return;
        }

        const session = data.find((item) => item.session_id === pollingSessionId);

        if (session?.status === 'Completed') {
          clearInterval(intervalId);
          dispatch(setToggleBanner(false));
          dispatch(setCurrentProcessingButton(false));
          dispatch(setRefressPreviousSession(true));
          dispatch(setToggleProcessingStatus(false));
          dispatch(toggleChatComponent(true));
          dispatch(setCurrentSessionDetails(session));
          dispatch(setCurrentChat(session.chats));
          dispatch(setToggleCurrentSession(true));
          dispatch(toggleEditContextButton(false));
        }

        if (session?.status === 'Failed') {
          clearInterval(intervalId);
          dispatch(setCurrentProcessingButton(false));
          dispatch(setToggleBanner(false));
          dispatch(setRefressPreviousSession(true));
          dispatch(toggleChatComponent(false));
          toast.error('Session creation failed.');
        }
      } catch (error) {
        clearInterval(intervalId);
        console.error('Polling error:', error);
        dispatch(setCurrentProcessingButton(false));
        dispatch(setToggleBanner(false));
        dispatch(setRefressPreviousSession(true));
        dispatch(toggleChatComponent(false));
      }
    }, 60000);
  };
