import { useEffect } from 'react';
import { toast } from 'react-hot-toast';
import { useDispatch } from 'react-redux';
import {
  setChatMessages,
  setCurrentSessionDetails,
  setCurrentProcessingButton,
  toggleChatComponent,
  setCurrentChat,
  toggleEditContextButton,
  setRefressPreviousSession,
  setAllBotSourcesArray,
  setToggleBanner,
  setToggleCurrentSession,
  setToggleProcessingStatus,
  toggleNewSession,
  setUserSelectedDocumentsForChat,
} from 'your/actions'; // update with actual paths

// 1. ✅ Reusable polling function
const startPollingSessionStatus = (sessionId, userId, dispatch) => {
  const intervalId = setInterval(async () => {
    try {
      const data = await getUserSessionChats({ userId, sessionId });

      if (!data || data.length === 0) {
        clearInterval(intervalId);
        localStorage.removeItem('pollingSessionId');
        localStorage.removeItem('pollingUserId');
        dispatch(setCurrentProcessingButton(false));
        dispatch(setToggleBanner(false));
        dispatch(setRefressPreviousSession(true));
        dispatch(toggleChatComponent(false));
        toast.error('Session creation failed. Please try again.');
        return;
      }

      const session = data.find((item) => item.session_id === sessionId);

      if (session?.status === 'Completed') {
        clearInterval(intervalId);
        localStorage.removeItem('pollingSessionId');
        localStorage.removeItem('pollingUserId');
        dispatch(setToggleBanner(false));
        dispatch(setCurrentProcessingButton(false));
        dispatch(setRefressPreviousSession(true));
        dispatch(setToggleProcessingStatus(false));
        dispatch(toggleChatComponent(true));
        dispatch(setCurrentSessionDetails(session));
        dispatch(setCurrentChat(session.chats));
        dispatch(setToggleCurrentSession(true));
        dispatch(toggleEditContextButton(false));
      }

      if (session?.status === 'Failed') {
        clearInterval(intervalId);
        localStorage.removeItem('pollingSessionId');
        localStorage.removeItem('pollingUserId');
        dispatch(setCurrentProcessingButton(false));
        dispatch(setToggleBanner(false));
        dispatch(setRefressPreviousSession(true));
        dispatch(toggleChatComponent(false));
        toast.error('Session creation failed.');
      }
    } catch (error) {
      clearInterval(intervalId);
      localStorage.removeItem('pollingSessionId');
      localStorage.removeItem('pollingUserId');
      console.error('Polling error:', error);
      dispatch(setCurrentProcessingButton(false));
      dispatch(setToggleBanner(false));
      dispatch(setRefressPreviousSession(true));
      dispatch(toggleChatComponent(false));
      toast.error('Something went wrong while polling.');
    }
  }, 60000); // poll every 1 minute
};


useEffect(() => {
  const sessionId = localStorage.getItem('pollingSessionId');
  const userId = localStorage.getItem('pollingUserId');

  if (sessionId && userId) {
    startPollingSessionStatus(sessionId, userId, dispatch);
  }
}, []);


const openChatComponent = async () => {
  if (!selectedDocuments?.length) {
    alert('Please select a file to proceed');
    return;
  }

  if (!isUsedByManageContext) {
    try {
      dispatch(setRefressPreviousSession(true));
      dispatch(toggleNewSession(false));
      dispatch(setChatMessages([]));
      dispatch(setAllBotSourcesArray([]));
      dispatch(setCurrentSessionDetails({}));
      dispatch(setCurrentChat([]));
      dispatch(toggleEditContextButton(true));
      dispatch(setToggleCurrentSession(false));
      dispatch(setUserSelectedDocumentsForChat(selectedDocuments));
      dispatch(toggleChatComponent(true));
      dispatch(setToggleBanner(true));
      dispatch(setCurrentProcessingButton(true));

      const res = await createChatSession({
        selectedDocuments,
        userId,
        useCase,
        seletedCompanyKnowldge,
        seletedIndustryKnowldge,
        seletedPersonalKnowldge,
        industryType,
      });

      if (res) {
        const result = await res.json();
        const sessionId = result.session_id;

        // ✅ Save for reload
        localStorage.setItem('pollingSessionId', sessionId);
        localStorage.setItem('pollingUserId', userId);

        // ✅ Start polling
        startPollingSessionStatus(sessionId, userId, dispatch);
      }
    } catch (error) {
      console.error('Failed to create session:', error);
      toast.error('Failed to create session. Try again.');
    }
  }
};


