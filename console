const createChatSession = async ({
  selectedDocuments,
  userId,
  useCase,
  seletedCompanyKnowldge,
  seletedIndustryKnowldge,
  seletedPersonalKnowldge,
  industryType,
}) => {
  const fileIds = selectedDocuments.map(doc => doc.file_id);
  const contextIds = [
    ...seletedCompanyKnowldge,
    ...seletedIndustryKnowldge,
    ...seletedPersonalKnowldge,
  ].map(ctx => ctx.context_id);

  const body = {
    user_id: userId,
    user_agent: 'Windows 10',
    project_type: 'LUMOS',
    use_case: useCase === 'earnings_call_transcript' ? 'Earnings Call Transcript' : useCase,
    files_selected: fileIds,
    contexts_selected: contextIds,
    industry_selected: industryType,
  };

  try {
    const res = await fetch(`${CONFIG.API_BASE_URL}/createChatSession`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body),
    });

    if (!res.ok) {
      dispatch(setCurrentProcessingButton(false));
      dispatch(setToggleBanner(false));
      dispatch(setRefressPreviousSession(true));
      dispatch(toggleChatComponent(false));

      switch (res.status) {
        case 422:
          toast.error('Invalid input provided.');
          break;
        case 500:
          toast.error('Server error. Please try again later.');
          break;
        default:
          toast.error('Unexpected error. Please try again.');
      }
      return null;
    }

    return res;
  } catch (error) {
    console.error('Error creating chat session:', error);
    toast.error('Network error. Please try again.');
    dispatch(setCurrentProcessingButton(false));
    dispatch(setToggleBanner(false));
    return null;
  }
};

const openChatComponent = async () => {
  if (!selectedDocuments?.length) {
    alert('Please select a file to proceed');
    return;
  }

  if (!isUsedByManageContext) {
    try {
      dispatch(setRefressPreviousSession(true));
      dispatch(toggleNewSession(false));
      dispatch(setChatMessages([]));
      dispatch(setAllBotSourcesArray([]));
      dispatch(setCurrentSessionDetails({}));
      dispatch(setCurrentChat([]));
      dispatch(toggleEditContextButton(true));
      dispatch(setToggleCurrentSession(false));
      dispatch(setUserSelectedDocumentsForChat(selectedDocuments));
      dispatch(toggleChatComponent(true));
      dispatch(setToggleBanner(true));
      dispatch(setCurrentProcessingButton(true));

      const res = await createChatSession({
        selectedDocuments,
        userId,
        useCase,
        seletedCompanyKnowldge,
        seletedIndustryKnowldge,
        seletedPersonalKnowldge,
        industryType,
      });

      if (res) {
        const result = await res.json();
        dispatch(setToggleBanner(false));
        dispatch(setCurrentProcessingButton(false));
        dispatch(setRefressPreviousSession(true));
        dispatch(setToggleProcessingStatus(false));
        dispatch(toggleChatComponent(true));
        dispatch(setCurrentSessionDetails(result));
        dispatch(setCurrentChat(result.chats));
        dispatch(setToggleCurrentSession(true));
        dispatch(toggleEditContextButton(false));
      }
    } catch (error) {
      console.error('Failed to create session:', error);
      toast.error('Failed to create session. Try again.');
    }
  } else {
    try {
      const fileStatuses = await fetchFileStatuses();
      const notIndexedFiles = selectedDocuments.filter(doc => {
        const statusEntry = fileStatuses.find(f => f.file_id === doc.file_id);
        return statusEntry?.status !== 'Completed';
      });

      if (notIndexedFiles.length) {
        const filesName = notIndexedFiles.map(doc => doc.file_name).join(', ');
        dispatch(setTogglePopup(true, `Indexing of these files: ${filesName} started. It may take a few minutes to complete.`));
        return;
      }

      openOrCloseManageKnowledgeWindow(false);

      const originalFileIds = userSelectedDocumentsFromReduxStore.map(doc => doc.file_id);
      const newFileSelections = selectedDocuments.filter(doc => !originalFileIds.includes(doc.file_id));
      const newFileSelectedIds = newFileSelections.map(doc => doc.file_id);

      const selectedContexts = [
        ...seletedCompanyKnowldge,
        ...seletedIndustryKnowldge,
        ...seletedPersonalKnowldge,
      ];
      const contextIds = selectedContexts.map(ctx => ctx.context_id);

      const body = {
        user_id: userId,
        chat_id: selectedChat.chat_id,
        original_file_ids: originalFileIds,
        files_selected: newFileSelectedIds,
        contexts_selected: contextIds,
        industry_selected: industryType,
      };

      const allSelectedDocs = [
        ...userSelectedDocumentsFromReduxStore,
        ...newFileSelections,
      ];

      dispatch(setUserSelectedDocumentsForChat(allSelectedDocs));
      openOrCloseManageKnowledgeWindow(false);

      const res = await fetch(`${CONFIG.API_BASE_URL}/manageChatContext`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(body),
      });

      setTimeout(() => {
        dispatch(setRefressPreviousSession(true));
        dispatch(setRefressCurrentSession(true));
      }, 2000);

      if (res.ok) {
        const result = await res.json();
        if (result.status === 'Success') {
          const updatedChatsArray = getUpdatedChatsArray({
            previousChatsArray: currentChatsArray,
            chatId: selectedChat.chat_id,
            seletedContexts: selectedContexts,
            selectedDocuments,
          });

          dispatch(setRefressPreviousSession(true));
          dispatch(setRefressCurrentSession(true));
          dispatch(setToggleProcessingStatus(false));
          dispatch(setCurrentChat(updatedChatsArray));
          toast.success('Updated Successfully');
        } else {
          toast.error('Failed to update chat context.');
        }
      } else {
        toast.error('Failed to update chat context.');
        console.error('Invalid response from manageChatContext');
      }
    } catch (error) {
      console.error('Error updating chat context:', error);
      toast.error('Network error while updating context.');
    }
  }
};
