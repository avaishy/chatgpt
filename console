[
  {
    "file_name": "Visa-test-kamal-1.pdf",
    "crt_ts": "2025-06-03 14:34:04.148208",
    "is_main_file": true,
    "indexing_status": "Failed",
    "chats_creation_status": null,
    "duration": "00:05:25.600996"
  },
  {
    "file_name": "Visa-test-kamal-1.pdf",
    "crt_ts": "2025-06-03 14:34:04.148208",
    "is_main_file": true,
    "indexing_status": "Failed",
    "chats_creation_status": null,
    "duration": "00:00:03.606192"
  },
  {
    "file_name": "Visa-test-kamal-1.pdf",
    "crt_ts": "2025-06-03 14:34:04.148208",
    "is_main_file": true,
    "indexing_status": "Failed",
    "chats_creation_status": null,
    "duration": "00:00:01.809333"
  },
  {
    "file_name": "Visa-test-kamal.pdf",
    "crt_ts": "2025-06-03 10:04:39.211008",
    "is_main_file": true,
    "indexing_status": "Completed",
    "chats_creation_status": "Completed",
    "duration": "00:10:28.929272"
  },
  {
    "file_name": "Visa-test-kamal.pdf",
    "crt_ts": "2025-06-03 10:04:39.211008",
    "is_main_file": false,
    "indexing_status": "Failed",
    "chats_creation_status": null,
    "duration": "00:05:14.630521"
  },
  {
    "file_name": "Visa Q1 revenue.pdf",
    "crt_ts": "2025-06-03 05:44:29.082251",
    "is_main_file": false,
    "indexing_status": "Completed",
    "chats_creation_status": null,
    "duration": "00:05:50.21395"
  },
  {
    "file_name": "CORRECTED-TRANSCRIPT_-Visa-Inc.(V-US)-Q1-2023-Earnings-Call-26-January-2023-5_00-PM-ET.pdf",
    "crt_ts": "2025-06-03 09:55:47.583269",
    "is_main_file": false,
    "indexing_status": "Completed",
    "chats_creation_status": null,
    "duration": "00:05:42.349705"
  },
  {
    "file_name": "CORRECTED-TRANSCRIPT_-Visa-Inc.(V-US)-Q1-2023-Earnings-Call-26-January-2023-5_00-PM-ET.pdf",
    "crt_ts": "2025-06-03 09:55:47.583269",
    "is_main_file": false,
    "indexing_status": "Failed",
    "chats_creation_status": null,
    "duration": "00:01:49.877366"
  }
]/* istanbul ignore file */
import React, {
  useEffect, useState, useMemo, useCallback, useRef,
} from 'react';
import { useSelector } from 'react-redux';
import { toast } from 'react-hot-toast';
import styles from '../../../styles/FileProcessing.scss';
import { getUserId } from '../../../store/selectors/earningsCallTranscriptSelectors';
import LoadingDots from './LoadingDots';

const ProcessingStatus = () => {
  const userId = useSelector(getUserId);
  const [allStatuses, setAllStatuses] = useState([]);
  const [taskFilter, setTaskFilter] = useState('All');
  const [statusFilter, setStatusFilter] = useState('All');
  const [loading, setLoading] = useState(true);
  const useCase = 'Earnings Call Transcript';
  const indexingWasProcessing = useRef(false);
  const initiallyCall = useRef(false);

  const formatTimeDuration = (duration) => {
    if (!duration) return '—';
    const [hours, minutes, rest] = duration.split(':');
    const seconds = Math.floor(Number.parseFloat(rest));
    return `${Number.parseInt(hours, 10)}h ${Number.parseInt(minutes, 10)}m ${seconds}s`;
  };

  const fetchStatuses = useCallback(async () => {
    try {
      const [fileRes, sessionRes] = await Promise.all([
        fetch('https://lumosusersessionmgmt-dev.aexp.com/getFilesFeatureOpsStats', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Accept: 'application/json',
          },
          body: JSON.stringify({
            user_id: userId,
            use_case: useCase,
          }),
        }),
        fetch('https://lumosusersessionmgmt-dev.aexp.com/getChatsCreationStatus', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Accept: 'application/json',
          },
          body: JSON.stringify({
            user_id: userId,
            use_case: useCase,
          }),
        }),
      ]);

      if (!fileRes.ok || !sessionRes.ok) {
        throw new Error('Failed to fetch one or both statuses');
      }

      const [fileStatuses, sessionStatuses] = await Promise.all([
        fileRes.json(),
        sessionRes.json(),
      ]);

      const formattedFiles = fileStatuses.map((item, idx) => ({
        id: `file-${item.file_name}-${idx}`,
        task: 'Indexing',
        name: item.file_name,
        status: item.status,
        duration: item.duration,
      }));

      const formattedSessions = sessionStatuses.map((item, idx) => ({
        id: `session-${item.file_name}-${idx}`,
        task: 'Pre-summarized',
        name: item.session_name,
        status: item.status,
        duration: item.duration,
      }));

      setAllStatuses([...formattedFiles, ...formattedSessions]);
    } catch (error) {
      toast.error('Error fetching statuses');
    } finally {
      setLoading(false);
    }
  }, [userId]);

  useEffect(() => {
    if (userId && !initiallyCall.current) {
      fetchStatuses();
      initiallyCall.current = true;
    }
    const indexingStatuses = allStatuses.filter((item) => item.task === 'Indexing');
    const anyProcessing = indexingStatuses.some((item) => item.status === 'Processing');
    const allCompleted = indexingStatuses.length > 0 && indexingStatuses.every((item) => item.status === 'Completed');
    if (indexingWasProcessing.current && allCompleted) {
      fetchStatuses();
    }
    indexingWasProcessing.current = anyProcessing;
  }, [userId, allStatuses, fetchStatuses]);

  const filteredStatuses = useMemo(() => allStatuses.filter((item) => {
    const matchesTask = taskFilter === 'All' || item.task === taskFilter;
    const matchesStatus = statusFilter === 'All' || item.status === statusFilter;
    return matchesTask && matchesStatus;
  }), [allStatuses, taskFilter, statusFilter]);

  return (
    <div className={styles.section}>
      {loading ? (
        <LoadingDots text="Loading" />
      ) : (
        <table className={styles.fileProcessingTable}>
          <thead>
            <tr>
              <th style={{ width: '20%' }}>
                <div className={styles.toggleContainer}>
                  <select
                    value={taskFilter}
                    onChange={(e) => setTaskFilter(e.target.value)}
                    className={styles.dropdown}
                  >
                    <option value="All">All</option>
                    <option value="Indexing">Indexing</option>
                    <option value="Pre-summarized">Pre-summarized chats</option>
                  </select>
                </div>
              </th>
              <th style={{ width: '20%' }}>Name</th>
              <th style={{ width: '20%' }}>
                <div className={styles.toggleContainer}>
                  <select
                    value={statusFilter}
                    onChange={(e) => setStatusFilter(e.target.value)}
                    className={styles.dropdown}
                  >
                    <option value="All">All</option>
                    <option value="Processing">Processing</option>
                    <option value="Completed">Completed</option>
                  </select>
                </div>
              </th>
              <th style={{ width: '20%' }}>Execution Time</th>
              <th style={{ width: '20%' }}>User ID</th>
            </tr>
          </thead>
          <tbody>
            {filteredStatuses.map((item) => (
              <tr key={item.id}>
                <td style={{ width: '20%' }}>{item.task}</td>
                <td style={{ width: '20%' }}>{item.name}</td>
                <td style={{ width: '20%' }}>{item.status}</td>
                <td style={{ width: '20%' }}>
                  {item.duration ? formatTimeDuration(item.duration) : '—'}
                </td>
                <td style={{ width: '20%' }}>{userId}</td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default ProcessingStatus;
