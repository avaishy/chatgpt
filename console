/* istanbul ignore file */
import React, { useEffect, useState } from 'react';
import { useSelector } from 'react-redux';
import styles from '../../../styles/FileProcessing.scss';
import { getUserId } from '../../../store/selectors/earningsCallTranscriptSelectors';

const dummyData = {
  fileProcessingStatus: [
    {
      upload_time: '2025-05-30 10:00:01',
      name: 'VISA 2024 Q3.pdf',
      is_main_file: true,
      file_indexing: 'Completed',
      answer_generation: 'Processing',
      execution_time: '3m 23s',
      user_id: 'anupam',
    },
    {
      upload_time: '2025-05-30 09:02:34',
      name: 'Mastercard 2024 Q2.pdf',
      is_main_file: false,
      file_indexing: 'Completed',
      answer_generation: 'NA',
      execution_time: '5m 22s',
      user_id: 'anupam',
    },
    {
      upload_time: '2025-05-30 09:00:05',
      name: 'VISA 2024 Q2.pdf',
      is_main_file: true,
      file_indexing: 'Completed',
      answer_generation: 'Completed',
      execution_time: '8m 13s',
      user_id: 'anupam',
    },
  ],
};

const ProcessingStatus = () => {
  const userId = useSelector(getUserId);
  const [rows, setRows] = useState([]);

  useEffect(() => {
    const formattedRows = dummyData.fileProcessingStatus.flatMap((item, index) => {
      const base = {
        name: item.name,
        execution_time: item.execution_time,
        user_id: item.user_id,
      };

      const result = [
        {
          id: `indexing-${index}`,
          task: 'Indexing',
          status: item.file_indexing,
          ...base,
        },
      ];

      if (item.answer_generation && item.answer_generation !== 'NA') {
        result.push({
          id: `pre-summary-${index}`,
          task: 'Pre-summarized',
          status: item.answer_generation,
          ...base,
        });
      }

      return result;
    });

    setRows(formattedRows);
  }, []);

  return (
    <div className={styles.section}>
      <table className={styles.fileProcessingTable}>
        <thead>
          <tr>
            <th style={{ width: '20%' }}>Task</th>
            <th style={{ width: '20%' }}>Name</th>
            <th style={{ width: '20%' }}>Status</th>
            <th style={{ width: '20%' }}>Execution Time</th>
            <th style={{ width: '20%' }}>User ID</th>
          </tr>
        </thead>
        <tbody>
          {rows.map((item) => (
            <tr key={item.id}>
              <td>{item.task}</td>
              <td>{item.name}</td>
              <td>{item.status}</td>
              <td>{item.execution_time}</td>
              <td>{item.user_id}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ProcessingStatus;