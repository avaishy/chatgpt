const fileStatuses = await fetchFileStatuses();
        const notIndexedFiles = selectedDocuments.filter((doc) => {
          const statusEntry = fileStatuses.find((indexFile) => indexFile.file_id === doc.file_id);
          return statusEntry && statusEntry.status !== 'Completed';
        });
        if (notIndexedFiles.length > 0) {
          const filesName = notIndexedFiles.map((doc) => doc.file_name).join(', ');
          dispatch(setTogglePopup(true, `Indexing of these files: ${filesName} started. Once indexing is complete it will automatically added to the Manage Context.`));
          openOrCloseManageKnowledgeWindow(false);
        }

        await Promise.all(
          notIndexedFiles.map((file) => startFileIndexing(file.file_id))
        );

        const fileIds = selectedDocuments.map((d) => d.file_id);
        const selectedContexts = [
          ...seletedCompanyKnowldge,
          ...seletedIndustryKnowldge,
          ...seletedPersonalKnowldge,
        ];
        const contextIds = selectedContexts.map((ctx) => ctx.context_id);

        const body = {
          user_id: userId,
          chat_id: selectedChat.chat_id,
          files_selected: fileIds,
          contexts_selected: contextIds,
          industry_selected: industryType,
        };

        const allSelectedDocs = [
          ...userSelectedDocumentsFromReduxStore,
          ...selectedDocuments.filter(
            (doc) => !userSelectedDocumentsFromReduxStore.some((d) => d.file_id === doc.file_id)
          ),
        ];

        dispatch(setUserSelectedDocumentsForChat(allSelectedDocs));
        openOrCloseManageKnowledgeWindow(false);
        const res = await fetch('https://lumosusersessionmgmt-dev.aexp.com/manageChatContext', {
          method: 'POST',
          body: JSON.stringify(body),
          headers: { 'Content-Type': 'application/json' },
        });

        if (res.ok) {
          const result = await res.json();
          if (result.status === 'Success') {
            const updatedChatsArray = getUpdatedChatsArray({
              previousChatsArray: currentChatsArray,
              chatId: selectedChat.chat_id,
              seletedContexts: selectedContexts,
              selectedDocuments,
            });

            dispatch(setRefressCurrentSession(true));
            dispatch(setRefressPreviousSession(true));
            dispatch(setToggleProcessingStatus(false));
            dispatch(setCurrentChat(updatedChatsArray));
            toast.success('Updated Successfully');
          }
        } else {
          toast.error('Something went wrong: Invalid Inputs');
        }
      } catch (error) {
        toast.error('Something went wrong while opening chat components');
      }
    }
  };
selectedDocuments.map is not a function why getting this error?
