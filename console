const removeDocument = async (fileIdRemove) => {
    try {
      const updatedDocuments = selectedDocuments.filter(
        (doc) => doc.file_id !== fileIdRemove
      );
      dispatch(setUserSelectedDocumentsForChat(updatedDocuments));
      const seletedContexts = [...seletedCompanyKnowldge,
        ...seletedIndustryKnowldge, ...seletedPersonalKnowldge];
      const seletedContextIds = seletedContexts.map((ctx) => ctx.context_id);
      const updatedFileIds = updatedDocuments.map((doc) => doc.file_id);
      const data = {
        user_id: userId,
        chat_id: selectedChat.chat_id,
        files_selected: updatedFileIds,
        contexts_selected: seletedContextIds,
        industry_selected: 'Payments',
      };
      const res = await fetch(`${CONFIG.API_BASE_URL}/manageChatContext`, { method: 'POST', body: JSON.stringify(data), headers: { 'Content-Type': 'application/json' } });
      if (res.status === 200) {
        dispatch(setRefressCurrentSession(true));
        dispatch(setRefressPreviousSession(true));
      } else {
        toast.error('Something went wrong');
      }
    } catch (error) {
      toast.error('Something went wrong while opening chat components');
    }
  };

            return (
              <div key={doc.file_id} className={styles.documentWrapper}>
                <button type="button" className={styles.button}>
                  {truncatedName}
                </button>
                {doc.file_name !== currentSessionDetails.session_name && showBanner === false && (
                <button
                  type="button"
                  className={styles.removeButton}
                  title="Remove Document"
                  aria-label={`Remove ${doc.file_name}`}
                  onClick={() => removeDocument(doc.file_id)}
                >
                  x
                </button>
                )}
              </div>
            );
          })}
        </div>
      </div>
      )}
