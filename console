  <div className={`${styles.buttonContainer}`}>
            <button type="button" size="md" className={`${styles.newSessionButton}`} onClick={handleNewSessionClick}>New Session</button>
          </div>
          <div />
          {showProcessingButton && (
            <div>
              <p className={`${styles.currentText}`}>Current Session</p>
              <div className={`${styles.currentProcessingContainer}`}>
                <button
                  type="button"
                  className={`${styles.currentProcessingItem}`}
                  onClick={handleProcessingPreviousSession}
                >
                  <div className={styles.textWrapper}>
                    <p className={styles.sessionNames}>{currentProcessing ?? userSelectDocuments?.[0]?.file_name}</p>
                    <div className={styles.tooltip}>{currentProcessing}</div>
                  </div> <MiniProcessingMessage />
                </button>
              </div>
            </div>
          )}

 const handleProcessingPreviousSession = (session) => {
    setCurrentProcessing(session.session_name);
    dispatch(setCurrentProcessingButton(true));
    dispatch(setUserSelectedCompanyKnowledge([]));
    dispatch(setUserSelectedIndustryKnowledge([]));
    dispatch(setUserSelectedPersonalKnowledge([]));
    dispatch(setUserSelectedDocumentsForChat([]));

    dispatch(setChatMessages([]));
    dispatch(setAllBotSourcesArray([]));
    dispatch(setCurrentSessionDetails({}));
    dispatch(toggleEditContextButton(true));
    dispatch(setToggleCurrentSession(false));
    dispatch(setCurrentChat([]));
    dispatch(toggleChatComponent(true));
    dispatch(setToggleBanner(true));
    dispatch(toggleNewSession(false));
    dispatch(setToggleProcessingStatus(false));
  };
  const [currentProcessing, setCurrentProcessing] = useState();
