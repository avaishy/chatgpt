// DocumentSkeleton.jsx
import styles from './YourStyles.module.css'; // Adjust path as needed

const DocumentSkeleton = () => {
  return (
    <div className={styles.documentItem}>
      <div className={styles.skeletonRadio} />
      <div className={styles.skeletonText} />
    </div>
  );
};

export default DocumentSkeleton;


/* Add to YourStyles.module.css */
.skeletonRadio {
  width: 16px;
  height: 16px;
  border-radius: 50%;
  background: #e0e0e0;
  margin-right: 10px;
  animation: pulse 1.5s infinite;
}

.skeletonText {
  height: 16px;
  width: 70%;
  background: #e0e0e0;
  border-radius: 4px;
  animation: pulse 1.5s infinite;
}

@keyframes pulse {
  0% { background-color: #e0e0e0; }
  50% { background-color: #f0f0f0; }
  100% { background-color: #e0e0e0; }
}


const [isLoadingDocuments, setIsLoadingDocuments] = useState(true);

const getAllUserDocuments = async () => {
  let useCaseTemp = null;
  setIsLoadingDocuments(true); // Start loading

  try {
    if (useCase === 'earnings_call_transcript') {
      useCaseTemp = 'Earnings Call Transcript';
    }
    const data = {
      user_id: userId,
      use_case: useCaseTemp,
    };
    const res = await fetch('https://lumosusersessionmgmt-dev.aexp.com/getUserFiles', {
      method: 'POST',
      body: JSON.stringify(data),
      headers: { 'Content-Type': 'application/json' },
    });
    const result = await res.json();
    setAllUserDocuments(result);
    dispatch(setAllUserFiles(result));
    setFilteredDocuments(result);
  } catch (error) {
    console.log(error);
    toast.error('Please try again');
  } finally {
    setIsLoadingDocuments(false); // Stop loading
  }
};





<div className={`${styles.documentList}`}>
  {isLoadingDocuments
    ? Array.from({ length: 5 }).map((_, idx) => <DocumentSkeleton key={idx} />)
    : filteredDocuments.map((doc, index) => (
        <div key={doc.file_id} className={`${styles.documentItem}`}>
          {/* existing document render logic */}
        </div>
      ))}
</div>
initClient.jsx:68 TypeError: Cannot read properties of undefined (reading 'buildInitialState')
    at createHolocronStore.js:51:30
    at immutable.es.js:4490:46
    at immutable.es.js:2491:1
    at push../node_modules/immutable/dist/immutable.es.js.ArrayMapNode.iterate.HashCollisionNode.iterate (immutable.es.js:2880:1)
    at Map.__iterate (immutable.es.js:2489:1)
    at Set.__iterate (immutable.es.js:4490:1)
    at Set.forEach (immutable.es.js:4874:1)
    at createReducer (createHolocronStore.js:44:16)
    at createHolocronStore.js:84:19
    at createStore (redux.js:154:1)
