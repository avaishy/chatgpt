// First: trigger previous session fetch on mount or refresh
useEffect(() => {
  if (userId && (shouldPreviousSessionRefresh || refreshCurrentSession)) {
    getPreviousSessions(); // this sets Redux state
    dispatch(setRefressPreviousSession(false));
  }
}, [userId, shouldPreviousSessionRefresh, refreshCurrentSession]);

// Second: once previousSessions + selectedChat + refreshCurrentSession are all ready, proceed
useEffect(() => {
  const ready =
    refreshCurrentSession &&
    selectedChat?.chat_id &&
    Array.isArray(previousSessions) &&
    previousSessions.length > 0;

  if (!ready) return;

  const timeoutId = setTimeout(() => {
    const matchedSession = previousSessions.find(session =>
      session.chats?.some(chat => chat.chat_id === selectedChat.chat_id)
    );

    console.log('matchedSession', matchedSession);

    if (matchedSession) {
      dispatch(setCurrentSessionDetails(matchedSession));
      dispatch(setCurrentChat(matchedSession.chats));
      dispatch(setRefressCurrentSession(false));
    }
  }, 500); // Delay can be reduced if timing is right

  return () => clearTimeout(timeoutId);
}, [previousSessions, selectedChat, refreshCurrentSession]);