/* istanbul ignore file */
import React, {
  useEffect, useState, useMemo,
} from 'react';
import { useSelector } from 'react-redux';
import styles from '../../../styles/FileProcessing.scss';
import { getUserId } from '../../../store/selectors/earningsCallTranscriptSelectors';
import LoadingDots from './LoadingDots';

const dummyData = {
  fileProcessingStatus: [
    {
      upload_time: '2025-05-30 10:00:01',
      name: 'VISA 2024 Q3.pdf',
      is_main_file: true,
      file_indexing: 'Completed',
      answer_generation: 'Processing',
      execution_time: '3m 23s',
      user_id: 'anupam',
    },
    {
      upload_time: '2025-05-30 09:02:34',
      name: 'Mastercard 2024 Q2.pdf',
      is_main_file: false,
      file_indexing: 'Completed',
      answer_generation: 'NA',
      execution_time: '5m 22s',
      user_id: 'anupam',
    },
    {
      upload_time: '2025-05-30 09:00:05',
      name: 'VISA 2024 Q2.pdf',
      is_main_file: true,
      file_indexing: 'Completed',
      answer_generation: 'Completed',
      execution_time: '8m 13s',
      user_id: 'anupam',
    },
  ],
};

const ProcessingStatus = () => {
  const userId = useSelector(getUserId);
  const [allStatuses, setAllStatuses] = useState([]);
  const [taskFilter, setTaskFilter] = useState('All');
  const [statusFilter, setStatusFilter] = useState('All');
  const [loading, setLoading] = useState(true);

  const formatTimeDuration = (duration) => {
    if (!duration) return 'â€”';
    const parts = duration.match(/(\d+)h\s*(\d+)m\s*(\d+)s/) || duration.match(/(\d+)m\s*(\d+)s/);
    if (!parts) return duration;
    if (parts.length === 4) return `${parts[1]}h ${parts[2]}m ${parts[3]}s`;
    return `${parts[1]}m ${parts[2]}s`;
  };

  useEffect(() => {
    // Simulate loading
    setTimeout(() => {
      const formattedData = dummyData.fileProcessingStatus.flatMap((item, idx) => {
        const rows = [];

        // File indexing task
        rows.push({
          id: `file-${item.name}-${idx}`,
          task: 'Indexing',
          name: item.name,
          status: item.file_indexing,
          duration: item.execution_time,
          user_id: item.user_id,
        });

        // Answer generation task if applicable
        if (item.answer_generation && item.answer_generation !== 'NA') {
          rows.push({
            id: `answer-${item.name}-${idx}`,
            task: 'Pre-summarized',
            name: item.name,
            status: item.answer_generation,
            duration: item.execution_time,
            user_id: item.user_id,
          });
        }

        return rows;
      });

      setAllStatuses(formattedData);
      setLoading(false);
    }, 500); // simulate slight delay
  }, []);

  const filteredStatuses = useMemo(() => allStatuses.filter((item) => {
    const matchesTask = taskFilter === 'All' || item.task === taskFilter;
    const matchesStatus = statusFilter === 'All' || item.status === statusFilter;
    return matchesTask && matchesStatus;
  }), [allStatuses, taskFilter, statusFilter]);

  return (
    <div className={styles.section}>
      {loading ? (
        <LoadingDots text="Loading" />
      ) : (
        <table className={styles.fileProcessingTable}>
          <thead>
            <tr>
              <th style={{ width: '20%' }}>
                <div className={styles.toggleContainer}>
                  <select
                    value={taskFilter}
                    onChange={(e) => setTaskFilter(e.target.value)}
                    className={styles.dropdown}
                  >
                    <option value="All">All</option>
                    <option value="Indexing">Indexing</option>
                    <option value="Pre-summarized">Pre-summarized chats</option>
                  </select>
                </div>
              </th>
              <th style={{ width: '20%' }}>Name</th>
              <th style={{ width: '20%' }}>
                <div className={styles.toggleContainer}>
                  <select
                    value={statusFilter}
                    onChange={(e) => setStatusFilter(e.target.value)}
                    className={styles.dropdown}
                  >
                    <option value="All">All</option>
                    <option value="Processing">Processing</option>
                    <option value="Completed">Completed</option>
                  </select>
                </div>
              </th>
              <th style={{ width: '20%' }}>Execution Time</th>
              <th style={{ width: '20%' }}>User ID</th>
            </tr>
          </thead>
          <tbody>
            {filteredStatuses.map((item) => (
              <tr key={item.id}>
                <td style={{ width: '20%' }}>{item.task}</td>
                <td style={{ width: '20%' }}>{item.name}</td>
                <td style={{ width: '20%' }}>{item.status}</td>
                <td style={{ width: '20%' }}>{formatTimeDuration(item.duration)}</td>
                <td style={{ width: '20%' }}>{item.user_id}</td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default ProcessingStatus;
